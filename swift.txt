-- Variable Declaration 
var name = "value"      (the space around = should be consistent)
var name=1  

-- print() prints to console
  print("My name is \(name)\")  Print formating 


-- let a = 10
let is used to assign constants you cannot change the value of a 

-- datatypes 
  var str:String = "rohan"
  var a:Int = 12
  
  str = String(a)         (for changing the data types of variables) Float, Double, Character
  Bool = true
  
-- If condition 
  if a < 4 {
    print(a)
    }
  else if {
  }
  else {
  }
  
-- logical operators
  and -- &&
  or -- ||
  not -- != 
  
-- switch case
  switch ch {
    case 1:
      abc
    case 2, 3:    #for multiple values
      xyz
    default:
      pqr
    }
-- loops 
  var str = "Rohan"
  for i in str{                   for i in 1...5{
    print(i)                            print(i)
    }                                 }
    

-- while is same
-- repeat-while 
  repeat{
  
  }
  while condition
  
-- Functions

  func add(arg1 para1:Int, arg2 para2:Int) -> Int{     OR     func add(para1:Int, para2:Int) -> Int{    
    return para1+para2
    }
    
    -> return type 
    
    function call 
     a =  add(arg1:23, arg2:34)
     
    --- using _ 
     func add(_ n1:Int, _ n2:Int) -> Int{
     }
     
     add(1,2)
     
-- Classes
  class Name{       (capital better datatypes start with capital letters in swift)
    
    }
    
  Objects
  
  let name = Name()     (instantiations)
  name.fname = "rohan"
  
  Inheritance 
    class child : parent {
    }
    
    Overriding
      class child :parent{
        override func drive(){
          }
          
      super.drive()     (super keyword same )
         
    Initialization
    
      class name{
      
        init()                                  (this allows that we can call it like var b)
        init(n:String, a:Int){
          name = "rohan"
          }
        }
    
    var a = name(n:"rohan", a:12)
    var b = name()
        
-- Initiating a null variable 
  var a:String?       #creates a null variable
  
  TO check if a variable is null or not 
    if let const = a.string {
      }
  We can do this for classes too.
  

-- Optionals 
   in the above when we assign a value to the nil value of the string and try to print it shows an error showing that it is
   an optional and not a normal variable
    #inside class      var a:String?
    obj.a = "rohan"
    
    print(obj.a)  #prints Optional(rohan)
    
    to unpack the contents of obj.a we can use !
    
    print(obj.a!) #prints rohan
    
    
--- Arrays
  var d =[1,2,34]
    for i in d{
    {
  to init an empty array we can do 
    var e = [Int]() or var f = [String]()
  
  we can perform append and remove operations on the arrays
    e.append(12)
    e.remove(at:12)
  e.count = lenght of array 
  
  // Different functions in documentation or press array. 
  
-- Dicts 
  var dict = Dictionary<String, String>()
        OR
  var dict2 = [String:String]()
  
  add -- dict["rohan"] = "reddy"
  access using a key -- dict["rohan"] == Optional("reddy")
  
  for (i,j) in dict {
    }
    
-- tuple is (a, b)

-- Structs

  struct names{
    var fname
    int id
  }
  var name1 = name(fname:"rasd", id:12)
  
-- Enums
  Data does not change in this
  
  enum Directions {
    case North
    case South
    
    }
    
    var dir = Directions.North
    You can use this switch case 
    
  *** extensions     
  
Variadic Functions
  We can pass arguements to functions like a list (in java String args[]) 
  ... is used for this purpose
  func add(_ nums:Int...)->Int{
    var sum=0;
    for i in add{
      sum+=i
      }
     return sum
     }

  Generics
    if we have a swap function then if we write using normal data types we have to write for string and int separately 
    swap (Int, Int)
    swap (String, String)
     
     we can use generics to solve this
     swap <T> (_ a:T, _b:T) 

  
                SWIFT FOR TENSORFLOW














  
  
  

